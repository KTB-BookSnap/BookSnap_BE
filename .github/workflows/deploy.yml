name: deploy-actions

on:
  push:
    branches: [ "deploy/river" ]

jobs:
  ci:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GIT_TOKEN }}
          submodules: true

      - name: Update Submodules
        run: |
          git submodule sync
          git submodule update --init --recursive --remote

      - name: Copy application-prod.yml
        run: cp BookSnap-properties/application-prod.yml src/main/resources/

      - name: Set environment variables
        run: |
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_URL=${{ secrets.DB_URL }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "IAM_ACCESS_KEY=${{ secrets.IAM_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "IAM_SECRET_KEY=${{ secrets.IAM_SECRET_KEY }}" >> $GITHUB_ENV

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Remove old Gradle Wrapper
        run: rm -rf .gradle gradle/wrapper gradlew

      - name: Setup Gradle Wrapper
        run: |
          gradle wrapper --gradle-version 8.4
          chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test


      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
            aws-access-key-id: ${{ secrets.IAM_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.IAM_SECRET_KEY }}
            aws-region: ap-northeast-2

      - name: Login to AWS ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPOSITORY_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REPOSITORY_NAME }}
          IMAGE_NAME: ${{ secrets.AWS_ECR_REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG